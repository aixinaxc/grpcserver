// Code generated by protoc-gen-go. DO NOT EDIT.
// source: testg/user_server.proto

package testg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserServer service

type UserServerClient interface {
	GetUserById(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	GetList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserList, error)
	GetListStream(ctx context.Context, in *Empty, opts ...grpc.CallOption) (UserServer_GetListStreamClient, error)
	SetUserStream(ctx context.Context, opts ...grpc.CallOption) (UserServer_SetUserStreamClient, error)
	Chat(ctx context.Context, opts ...grpc.CallOption) (UserServer_ChatClient, error)
}

type userServerClient struct {
	cc *grpc.ClientConn
}

func NewUserServerClient(cc *grpc.ClientConn) UserServerClient {
	return &userServerClient{cc}
}

func (c *userServerClient) GetUserById(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/testg.UserServer/GetUserById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) GetList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserList, error) {
	out := new(UserList)
	err := grpc.Invoke(ctx, "/testg.UserServer/GetList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) GetListStream(ctx context.Context, in *Empty, opts ...grpc.CallOption) (UserServer_GetListStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_UserServer_serviceDesc.Streams[0], c.cc, "/testg.UserServer/GetListStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServerGetListStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserServer_GetListStreamClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type userServerGetListStreamClient struct {
	grpc.ClientStream
}

func (x *userServerGetListStreamClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServerClient) SetUserStream(ctx context.Context, opts ...grpc.CallOption) (UserServer_SetUserStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_UserServer_serviceDesc.Streams[1], c.cc, "/testg.UserServer/SetUserStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServerSetUserStreamClient{stream}
	return x, nil
}

type UserServer_SetUserStreamClient interface {
	Send(*User) error
	CloseAndRecv() (*UserList, error)
	grpc.ClientStream
}

type userServerSetUserStreamClient struct {
	grpc.ClientStream
}

func (x *userServerSetUserStreamClient) Send(m *User) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServerSetUserStreamClient) CloseAndRecv() (*UserList, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UserList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServerClient) Chat(ctx context.Context, opts ...grpc.CallOption) (UserServer_ChatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_UserServer_serviceDesc.Streams[2], c.cc, "/testg.UserServer/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServerChatClient{stream}
	return x, nil
}

type UserServer_ChatClient interface {
	Send(*User) error
	Recv() (*User, error)
	grpc.ClientStream
}

type userServerChatClient struct {
	grpc.ClientStream
}

func (x *userServerChatClient) Send(m *User) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServerChatClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for UserServer service

type UserServerServer interface {
	GetUserById(context.Context, *User) (*User, error)
	GetList(context.Context, *Empty) (*UserList, error)
	GetListStream(*Empty, UserServer_GetListStreamServer) error
	SetUserStream(UserServer_SetUserStreamServer) error
	Chat(UserServer_ChatServer) error
}

func RegisterUserServerServer(s *grpc.Server, srv UserServerServer) {
	s.RegisterService(&_UserServer_serviceDesc, srv)
}

func _UserServer_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testg.UserServer/GetUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).GetUserById(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testg.UserServer/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).GetList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_GetListStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServerServer).GetListStream(m, &userServerGetListStreamServer{stream})
}

type UserServer_GetListStreamServer interface {
	Send(*User) error
	grpc.ServerStream
}

type userServerGetListStreamServer struct {
	grpc.ServerStream
}

func (x *userServerGetListStreamServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func _UserServer_SetUserStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServerServer).SetUserStream(&userServerSetUserStreamServer{stream})
}

type UserServer_SetUserStreamServer interface {
	SendAndClose(*UserList) error
	Recv() (*User, error)
	grpc.ServerStream
}

type userServerSetUserStreamServer struct {
	grpc.ServerStream
}

func (x *userServerSetUserStreamServer) SendAndClose(m *UserList) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServerSetUserStreamServer) Recv() (*User, error) {
	m := new(User)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UserServer_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServerServer).Chat(&userServerChatServer{stream})
}

type UserServer_ChatServer interface {
	Send(*User) error
	Recv() (*User, error)
	grpc.ServerStream
}

type userServerChatServer struct {
	grpc.ServerStream
}

func (x *userServerChatServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServerChatServer) Recv() (*User, error) {
	m := new(User)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _UserServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "testg.UserServer",
	HandlerType: (*UserServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserById",
			Handler:    _UserServer_GetUserById_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _UserServer_GetList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetListStream",
			Handler:       _UserServer_GetListStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetUserStream",
			Handler:       _UserServer_SetUserStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Chat",
			Handler:       _UserServer_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "testg/user_server.proto",
}

func init() { proto.RegisterFile("testg/user_server.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 175 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2f, 0x49, 0x2d, 0x2e,
	0x49, 0xd7, 0x2f, 0x2d, 0x4e, 0x2d, 0x8a, 0x2f, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0xd2, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x4b, 0x48, 0x09, 0x23, 0xc9, 0x97, 0xe5, 0x43, 0xe4, 0x8c,
	0x9e, 0x30, 0x72, 0x71, 0x85, 0x16, 0xa7, 0x16, 0x05, 0x83, 0x35, 0x08, 0xa9, 0x73, 0x71, 0xbb,
	0xa7, 0x96, 0x80, 0x04, 0x9c, 0x2a, 0x3d, 0x53, 0x84, 0xb8, 0xf5, 0xc0, 0x7a, 0xf4, 0x40, 0x02,
	0x52, 0xc8, 0x1c, 0x21, 0x0d, 0x2e, 0x76, 0xf7, 0xd4, 0x12, 0x9f, 0xcc, 0xe2, 0x12, 0x21, 0x1e,
	0xa8, 0xb8, 0x6b, 0x6e, 0x41, 0x49, 0xa5, 0x14, 0x3f, 0x92, 0x2a, 0xb0, 0xb4, 0x0e, 0x17, 0x2f,
	0x54, 0x65, 0x70, 0x49, 0x51, 0x6a, 0x62, 0x2e, 0x9a, 0x7a, 0x64, 0x53, 0x0d, 0x18, 0x85, 0xf4,
	0xb9, 0x78, 0x83, 0x21, 0x0e, 0x80, 0xaa, 0x46, 0x71, 0x02, 0xba, 0xe1, 0x1a, 0x8c, 0x42, 0x2a,
	0x5c, 0x2c, 0xce, 0x19, 0x89, 0x25, 0xb8, 0x9d, 0xaa, 0xc1, 0x68, 0xc0, 0x98, 0xc4, 0x06, 0xf6,
	0xad, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x59, 0x34, 0x4f, 0x98, 0x24, 0x01, 0x00, 0x00,
}
